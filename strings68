#!/usr/bin/env python3
import sys
import fileinput
from antlr4 import *
import argparse
from dist.strings68Lexer import strings68Lexer
from dist.strings68Parser import strings68Parser
from dist.strings68Visitor import strings68Visitor

vars = {}
funcs = {}
loopend = 0
progargs=[]


def mask(a, b):
    start_index = 0
    for c in b:
        for i in range(start_index, len(a)):
            if c == a[i]:
                a = "".join((a[:i], "*", a[i+1:]))
                start_index = i+1
                break
    return a

def containsFunc(ctx:strings68Parser.AssignstmtContext):
    #print("containsFunc", ctx)
    s = ctx.getChild(3).start.text
    subs = ctx.getChild(4).symbol.text.strip('\"') 
    if s in vars:
        sst = vars[s]
    else:
        return False
    if subs in sst:
        return True
    else:
        return False
    
class MyVisitor(strings68Visitor):

    # Visit a parse tree produced by strings68Parser#program.
    def visitProgram(self, ctx:strings68Parser.ProgramContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by strings68Parser#declaration.
    def visitDeclaration(self, ctx:strings68Parser.DeclarationContext):
        name = ctx.start.text
        vars[name] = ""
        if ctx.getChild(2).symbol.text == "(":
            funcs[name] = ctx    
            return self
        return self.visitChildren(ctx)

    # Visit a parse tree produced by strings68Parser#function.
    def visitFunction(self, ctx:strings68Parser.FunctionContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by strings68Parser#arguments.
    def visitArguments(self, ctx:strings68Parser.ArgumentsContext):
        return self.visitChildren(ctx)

    # Visit a parse tree produced by strings68Parser#statement.
    def visitStatement(self, ctx:strings68Parser.StatementContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by strings68Parser#ifstmt.
    def visitIfstmt(self, ctx:strings68Parser.IfstmtContext):
        r = ctx.getChild(4)
        l = ctx.getChild(2)
        rs=""
        ls=""

        if r != None and getattr(r, "start", None):
            rs = r.start.text
        if r != None and getattr(r, "symbol", None):
            rs = r.symbol.text
        if l != None and getattr(l, "start", None):
            ls = l.start.text
        if ls in vars:
            vall = vars[ls].strip('\"')
            valr = rs.strip('\"')
            if rs in vars:
                valr = vars[rs]
            if vall == valr:
                self.visitChildren(ctx)
        return self

    def visitLoopstmt(self, ctx:strings68Parser.LoopstmtContext):
        global loopend
        loopend = 0

        while (loopend==0):
            i = 0
            # Evaluate all statements inside the while loop.
            num = ctx.getChildCount()
            # stm = ctx.statement()
            while (i < num-1):
                st = ctx.getChild(i) 

                #op = getattr(st, "getSymbol", None)            
                #if op is not None:
                #    print("getSymbol() = " + str(st.getSymbol()))
                #op = getattr(st,"start", None)
                #if op is not None:
                #    print("start.text=" + st.start.text)
            
                self.visitChildren(st)
                i = i + 1            
        return self

    def visitBreakstmt(self, ctx:strings68Parser.BreakstmtContext):
        global loopend
        loopend = 1 
        return self
    
    # Visit a parse tree produced by strings68Parser#printstmt.
    def visitPrintstmt(self, ctx:strings68Parser.PrintstmtContext):
        v = ctx.getChild(1).start.text.strip('\"')
        #replace $vars with actual string values
        n = v.find("$")
        if n != -1 :
            spl = v.split(" ")
            for y in spl:
                if y[0] == '$':
                    b = y[1:].strip(" ")
                    y = y.strip(" ")
                    pb = ""
                    if b in vars:
                        pb = vars[b]
                    v = v.replace(y,pb)   
            print(v) 
        else:
            if v in vars:
                print(vars[v])
            else:
                print(v)
        
        return self.visitChildren(ctx)

    def visitToupperstmt(self, ctx:strings68Parser.ToupperstmtContext):
        name = ctx.getChild(1).start.text
        if name in vars:
            vars[name]=vars[name].upper()
        return self.visitChildren(ctx)

    def visitTolowerstmt(self, ctx:strings68Parser.TolowerstmtContext):
        name = ctx.getChild(1).start.text
        if name in vars:
            vars[name]=vars[name].lower()
        return self.visitChildren(ctx)

    def visitShiftlstmt(self, ctx:strings68Parser.ShiftlstmtContext):
        v = ctx.getChild(1).start.text
        if v in vars:
            val = vars[v]
            valtemp = val[1:]
            val = valtemp 
            vars[v]=val
        return self.visitChildren(ctx)
    
    def visitShiftrstmt(self, ctx:strings68Parser.ShiftlstmtContext):
        v = ctx.getChild(1).start.text
        if v in vars:
            val = vars[v]
            N = len(vars[v])
            valtemp = val[:N-1]
            val = valtemp
            vars[v]=val
        return self.visitChildren(ctx)
 
    # Visit a parse tree produced by strings68Parser#maskstmt.
    def visitMaskstmt(self, ctx:strings68Parser.MaskstmtContext):
        v = ctx.getChild(1).start.text
        w = ctx.getChild(2).start.text
        if v in vars:
            if w in vars:
                r = mask(vars[v],vars[w])
                vars[v] = r             
        return self.visitChildren(ctx)

    # Visit a parse tree produced by strings68Parser#assignstmt.
    def visitAssignstmt(self, ctx:strings68Parser.AssignstmtContext):
    #    name = ctx.NAME().symbol.text
        val = None
        ectx = ctx.expression()
        if ectx is not None:
            val = self.visitExpression(ectx)
           
        name = ctx.start.text.strip('\"')
        if val is None and ctx.getChildCount() > 4:
            if ctx.getChild(2).symbol.text == "contains":
                b = containsFunc(ctx)
                if b == True: 
                    vars[name] = "TRUE"
                else:
                    vars[name] = "FALSE"                   
                return self
            val = ctx.getChild(3).start.text.strip('\"')
        else:
            if val is None: # and getattr(ctx,"getChild", None):   
                val = ctx.getChild(2).start.text.strip('\"')

        if val is None:
             return self.visitChildren(ctx)
        
        val = val.strip('\"')

        # replace progargs
        n = val.find("%")
        if n != -1 and len(progargs) > 0:
            spl = val.split(" ")
            z = 0
            for x in spl:
                p = x.rfind("%")
                if (p != -1):
                    g = x[p:p+2]
                    x = x.replace("%","")
                    i = int(x)
                    if len(progargs) >= i:
                        spl[z] = progargs[i]
                        val = val.replace(g,spl[z])
                z = z + 1
            
            #val = ""    
            #for x in spl:
            #    val = val + x
                
        # replace variables        
        n = val.find("$")
        if n != -1 :
            spl = val.split(" ")
            for y in spl:
                if y[0] == '$':
                    b = y[1:].strip(" ")
                    y = y.strip(" ")
                    pb = ""
                    if b in vars:
                        pb = vars[b]
                    val = val.replace(y,pb)
            
        if name in vars and val in vars:
            updateval = vars[val]
            vars.update({name:updateval})
        else: 
            vars[name] = val

        return self.visitChildren(ctx)

    # Visit a parse tree produced by strings68Parser#expression.
    def visitExpression(self, ctx:strings68Parser.ExpressionContext):
        if len(ctx.children) == 3:
            if getattr(ctx.children[1], "symbol", None):
                op = ctx.children[1].symbol.text
                if op == '+':
                    l = ctx.children[0].start.text.strip('\"')
                    r = ctx.children[2].start.text.strip('\"')
                return l + r
        return self.visitChildren(ctx)
     
 
    # Visit a parse tree produced by strings68Parser#term.
    def visitTerm(self, ctx:strings68Parser.TermContext):
        return self.visitChildren(ctx)


    # Visit a parse tree produced by strings68Parser#identifier.
    def visitIdentifier(self, ctx:strings68Parser.IdentifierContext):
        return self.visitChildren(ctx)

    # Visit a parse tree produced by strings68Parser#stringchars.
    def visitStringchars(self, ctx:strings68Parser.StringcharsContext):
        return self.visitChildren(ctx)

    # Visit a parse tree produced by strings68Parser#integer.
    def visitString(self, ctx:strings68Parser.StringContext):
        return self.visitChildren(ctx)


if __name__ == "__main__":
   
    parser = argparse.ArgumentParser(formatter_class = argparse.RawDescriptionHelpFormatter,description="strings68 experimental strings only language version 0.01")
    parser.add_argument("-f","--file", type=str,required=True) 
    parser.add_argument("-p","--pargs", type=str,required=False,help="prog args") 
    args = parser.parse_args()
   
    print (args)

    s = args.pargs
    f = args.file

    if s is not None:
        progargs = s.split()

    # data =  InputStream(input(">>> "))
    # lexer
    lexer = strings68Lexer(FileStream(f, encoding='utf-8'))
    stream = CommonTokenStream(lexer)
    # parser
    parser = strings68Parser(stream)
   
    tree = parser.program()
    #handleExpression(tree)
    # evaluator
    visitor = MyVisitor()
    output = visitor.visitProgram(tree)

